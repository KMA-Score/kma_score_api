package aes

// Credit: ChatGPT
// The code below is fully generated by AI

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/base64"
	"io"
)

func GenerateAESKey() ([]byte, error) {
	key := make([]byte, 32)
	if _, err := rand.Read(key); err != nil {
		return nil, err
	}
	return key, nil
}

func EncryptGCM(key []byte, message string) (string, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	// Generate a random nonce
	nonce := make([]byte, 12)
	if _, err := io.ReadFull(rand.Reader, nonce); err != nil {
		return "", err
	}

	// Create a new GCM block cipher
	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		return "", err
	}

	// Encrypt the message using GCM mode
	ciphertext := aesgcm.Seal(nil, nonce, []byte(message), nil)

	// Concatenate the nonce and ciphertext
	encrypted := append(nonce, ciphertext...)

	// Encode the encrypted message as a base64 string
	return base64.StdEncoding.EncodeToString(encrypted), nil
}

func DecryptGCM(key []byte, encrypted string) (string, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	// Decode the base64 string to get the encrypted message
	encryptedBytes, err := base64.StdEncoding.DecodeString(encrypted)
	if err != nil {
		return "", err
	}

	// Split the nonce and ciphertext
	nonce := encryptedBytes[:12]
	ciphertext := encryptedBytes[12:]

	// Create a new GCM block cipher
	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		return "", err
	}

	// Decrypt the ciphertext using GCM mode
	plaintext, err := aesgcm.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		return "", err
	}

	return string(plaintext), nil
}
