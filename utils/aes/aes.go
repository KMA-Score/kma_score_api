package aes

// Credit: ChatGPT
// The code below is fully generated by AI

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"io"
	"strings"
)

func GenerateAESKey() ([]byte, error) {
	key := make([]byte, 32)
	if _, err := rand.Read(key); err != nil {
		return nil, err
	}
	return key, nil
}

func EncryptGCM(key []byte, message string) (string, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	// Generate a random nonce
	nonce := make([]byte, 12)
	if _, err := io.ReadFull(rand.Reader, nonce); err != nil {
		return "", err
	}

	// Create a new GCM block cipher
	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		return "", err
	}

	// Encrypt the message using GCM mode
	ciphertext := aesgcm.Seal(nil, nonce, []byte(message), nil)

	//// Concatenate the nonce and ciphertext
	//encrypted := append(nonce, ciphertext...)
	//
	//// Encode the encrypted message as a base64 string
	//return base64.StdEncoding.EncodeToString(encrypted), nil

	return fmt.Sprintf("%x.%x.%x", ciphertext, nonce, aesgcm.Seal(nil, nonce, nil, nil)), nil
}

// PKCS5UnPadding  pads a certain blob of data with necessary data to be used in AES block cipher
func PKCS5UnPadding(src []byte) []byte {
	length := len(src)
	unpadding := int(src[length-1])

	return src[:(length - unpadding)]
}

func DecryptCBC(key []byte, encrypted string) ([]byte, error) {
	parts := strings.Split(encrypted, ".")

	ciphertext, err := hex.DecodeString(parts[0])
	if err != nil {
		return nil, err
	}

	iv, err := hex.DecodeString(parts[1])
	if err != nil {
		return nil, err
	}

	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	// Decrypt the ciphertext
	mode := cipher.NewCBCDecrypter(block, iv)
	decryptedText := make([]byte, len(ciphertext))
	mode.CryptBlocks(decryptedText, ciphertext)
	decryptedText = PKCS5UnPadding(decryptedText)

	return decryptedText, nil
}
